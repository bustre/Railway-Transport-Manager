<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="2288px" preserveAspectRatio="none" style="width:2151px;height:2288px;background:#FFFFFF;" version="1.1" viewBox="0 0 2151 2288" width="2151px" zoomAndPan="magnify"><defs/><g><!--MD5=[c601746249bb3afee6e15cdbf7c9c931]
cluster rtm::core--><g id="cluster_rtm::core"><path d="M8.5,6 L84.5,6 A3.75,3.75 0 0 1 87,8.5 L94,28.2969 L2141.5,28.2969 A2.5,2.5 0 0 1 2144,30.7969 L2144,2278.5 A2.5,2.5 0 0 1 2141.5,2281 L8.5,2281 A2.5,2.5 0 0 1 6,2278.5 L6,8.5 A2.5,2.5 0 0 1 8.5,6 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="94" y1="28.2969" y2="28.2969"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="75" x="10" y="20.9951">rtm::core</text></g><!--MD5=[9aee17fe71140c35d4efd412f987f918]
class rtm::core.electric_locomotive--><g id="elem_rtm::core.electric_locomotive"><rect codeLine="8" fill="#F1F1F1" height="278.4844" id="rtm::core.electric_locomotive" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="701" x="22.5" y="1456"/><ellipse cx="282.75" cy="1472" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M285.7188,1477.6406 Q285.1406,1477.9375 284.5,1478.0781 Q283.8594,1478.2344 283.1563,1478.2344 Q280.6563,1478.2344 279.3281,1476.5938 Q278.0156,1474.9375 278.0156,1471.8125 Q278.0156,1468.6875 279.3281,1467.0313 Q280.6563,1465.375 283.1563,1465.375 Q283.8594,1465.375 284.5,1465.5313 Q285.1563,1465.6875 285.7188,1465.9844 L285.7188,1468.7031 Q285.0938,1468.125 284.5,1467.8594 Q283.9063,1467.5781 283.2813,1467.5781 Q281.9375,1467.5781 281.25,1468.6563 Q280.5625,1469.7188 280.5625,1471.8125 Q280.5625,1473.9063 281.25,1474.9844 Q281.9375,1476.0469 283.2813,1476.0469 Q283.9063,1476.0469 284.5,1475.7813 Q285.0938,1475.5 285.7188,1474.9219 L285.7188,1477.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="172" x="303.25" y="1478.2314">electric_locomotive</text><line style="stroke:#181818;stroke-width:0.5;" x1="23.5" x2="722.5" y1="1488" y2="1488"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="675" x="42.5" y="1508.708">const std::string&amp; image_path, unsigned int power, unsigned int max_speed,</text><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="502" x="42.5" y="1529.6611">double length, double weight, unsigned int max_trailers,</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="30.5" y="1542.8828"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="231" x="42.5" y="1550.6143">engine_efficiency : double</text><line style="stroke:#181818;stroke-width:0.5;" x1="23.5" x2="722.5" y1="1558.8594" y2="1558.8594"/><ellipse cx="33.5" cy="1574.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="580" x="42.5" y="1579.5674">electric_locomotive(const std::string&amp; name, const std::string&amp; id,</text><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="226" x="42.5" y="1600.5205">double engine_efficiency)</text><ellipse cx="33.5" cy="1616.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="283" x="42.5" y="1621.4736">get_engine_efficiency() : double</text><ellipse cx="33.5" cy="1637.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="252" x="42.5" y="1642.4268">get_tractive_force() : double</text><ellipse cx="33.5" cy="1658.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="260" x="42.5" y="1663.3799">clone() : electric_locomotive*</text><ellipse cx="33.5" cy="1679.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="343" x="42.5" y="1684.333">accept(visitor_interface&amp; visitor) : void</text><ellipse cx="33.5" cy="1700.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="398" x="42.5" y="1705.2861">accept(const_visitor_interface&amp; visitor) : void</text><ellipse cx="33.5" cy="1721.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="408" x="42.5" y="1726.2393">set_engine_efficiency(double efficiency) : void</text></g><!--MD5=[2e0b9f2cd5a5c14a7ad6e6383f5d21ef]
class rtm::core.goods_wagon--><g id="elem_rtm::core.goods_wagon"><rect codeLine="22" fill="#F1F1F1" height="446.1094" id="rtm::core.goods_wagon" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="677" x="758.5" y="1372"/><ellipse cx="1032.75" cy="1388" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1035.7188,1393.6406 Q1035.1406,1393.9375 1034.5,1394.0781 Q1033.8594,1394.2344 1033.1563,1394.2344 Q1030.6563,1394.2344 1029.3281,1392.5938 Q1028.0156,1390.9375 1028.0156,1387.8125 Q1028.0156,1384.6875 1029.3281,1383.0313 Q1030.6563,1381.375 1033.1563,1381.375 Q1033.8594,1381.375 1034.5,1381.5313 Q1035.1563,1381.6875 1035.7188,1381.9844 L1035.7188,1384.7031 Q1035.0938,1384.125 1034.5,1383.8594 Q1033.9063,1383.5781 1033.2813,1383.5781 Q1031.9375,1383.5781 1031.25,1384.6563 Q1030.5625,1385.7188 1030.5625,1387.8125 Q1030.5625,1389.9063 1031.25,1390.9844 Q1031.9375,1392.0469 1033.2813,1392.0469 Q1033.9063,1392.0469 1034.5,1391.7813 Q1035.0938,1391.5 1035.7188,1390.9219 L1035.7188,1393.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="120" x="1053.25" y="1394.2314">goods_wagon</text><line style="stroke:#181818;stroke-width:0.5;" x1="759.5" x2="1434.5" y1="1404" y2="1404"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="631" x="778.5" y="1424.708">const std::string&amp; image_path, double weight, unsigned int max_speed,</text><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="651" x="778.5" y="1445.6611">double length, bool is_covered, double floor_space, double load_capacity,</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="766.5" y="1458.8828"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="128" x="778.5" y="1466.6143">covered : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="766.5" y="1479.8359"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="177" x="778.5" y="1487.5674">floor_space : double</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="766.5" y="1500.7891"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="196" x="778.5" y="1508.5205">load_capacity : double</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="766.5" y="1521.7422"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="256" x="778.5" y="1529.4736">limit_panel : load_limit_panel</text><line style="stroke:#181818;stroke-width:0.5;" x1="759.5" x2="1434.5" y1="1537.7188" y2="1537.7188"/><ellipse cx="769.5" cy="1553.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="528" x="778.5" y="1558.4268">goods_wagon(const std::string&amp; name, const std::string&amp; id,</text><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="316" x="778.5" y="1579.3799">const load_limit_panel&amp; limit_panel)</text><ellipse cx="769.5" cy="1595.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="164" x="778.5" y="1600.333">is_covered() : bool</text><ellipse cx="769.5" cy="1616.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="229" x="778.5" y="1621.2861">get_floor_space() : double</text><ellipse cx="769.5" cy="1637.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="248" x="778.5" y="1642.2393">get_load_capacity() : double</text><ellipse cx="769.5" cy="1658.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="208" x="778.5" y="1663.1924">clone() : goods_wagon*</text><ellipse cx="769.5" cy="1679.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="354" x="778.5" y="1684.1455">get_load_limit_panel() : load_limit_panel</text><ellipse cx="769.5" cy="1700.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="343" x="778.5" y="1705.0986">accept(visitor_interface&amp; visitor) : void</text><ellipse cx="769.5" cy="1721.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="398" x="778.5" y="1726.0518">accept(const_visitor_interface&amp; visitor) : void</text><ellipse cx="769.5" cy="1742.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="315" x="778.5" y="1747.0049">set_covered(bool is_covered) : void</text><ellipse cx="769.5" cy="1763.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="333" x="778.5" y="1767.958">set_floar_space(double f_space) : void</text><ellipse cx="769.5" cy="1784.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="375" x="778.5" y="1788.9111">set_load_capacity(double l_capacity) : void</text><ellipse cx="769.5" cy="1805.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="522" x="778.5" y="1809.8643">set_load_limit_panel(const load_limit_panel&amp; l_panel) : void</text></g><!--MD5=[95d7706c0108b5334397c072e33ef739]
class rtm::core.load_limit_panel--><g id="elem_rtm::core.load_limit_panel"><rect codeLine="44" fill="#F1F1F1" height="194.6719" id="rtm::core.load_limit_panel" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="528" x="833" y="1878"/><ellipse cx="1021.75" cy="1894" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1024.7188,1899.6406 Q1024.1406,1899.9375 1023.5,1900.0781 Q1022.8594,1900.2344 1022.1563,1900.2344 Q1019.6563,1900.2344 1018.3281,1898.5938 Q1017.0156,1896.9375 1017.0156,1893.8125 Q1017.0156,1890.6875 1018.3281,1889.0313 Q1019.6563,1887.375 1022.1563,1887.375 Q1022.8594,1887.375 1023.5,1887.5313 Q1024.1563,1887.6875 1024.7188,1887.9844 L1024.7188,1890.7031 Q1024.0938,1890.125 1023.5,1889.8594 Q1022.9063,1889.5781 1022.2813,1889.5781 Q1020.9375,1889.5781 1020.25,1890.6563 Q1019.5625,1891.7188 1019.5625,1893.8125 Q1019.5625,1895.9063 1020.25,1896.9844 Q1020.9375,1898.0469 1022.2813,1898.0469 Q1022.9063,1898.0469 1023.5,1897.7813 Q1024.0938,1897.5 1024.7188,1896.9219 L1024.7188,1899.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="142" x="1042.25" y="1900.2314">load_limit_panel</text><line style="stroke:#181818;stroke-width:0.5;" x1="834" x2="1360" y1="1910" y2="1910"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="841" y="1922.9766"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="270" x="853" y="1930.708">table : ctr::vector&lt;load_limit&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="834" x2="1360" y1="1938.9531" y2="1938.9531"/><ellipse cx="844" cy="1954.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="156" x="853" y="1959.6611">load_limit_panel()</text><ellipse cx="844" cy="1975.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="408" x="853" y="1980.6143">get_line_categorys() : ctr::vector&lt;std::string&gt;</text><ellipse cx="844" cy="1996.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="406" x="853" y="2001.5674">get_limit(const std::string&amp; category) : double</text><ellipse cx="844" cy="2017.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="502" x="853" y="2022.5205">add_limit(const std::string&amp; category, double load) : void</text><ellipse cx="844" cy="2038.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="424" x="853" y="2043.4736">remove_limit(const std::string&amp; category) : void</text><ellipse cx="844" cy="2059.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="496" x="853" y="2064.4268">set_limit(const std::string&amp; category, double load) : void</text></g><!--MD5=[2835b239eaba36bd89c9526637f6acb2]
class rtm::core.load_limit_panel::load_limit--><g id="elem_rtm::core.load_limit_panel::load_limit"><rect codeLine="54" fill="#F1F1F1" height="131.8125" id="rtm::core.load_limit_panel::load_limit" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="524" x="835" y="2133"/><ellipse cx="973.25" cy="2149" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M976.2188,2154.6406 Q975.6406,2154.9375 975,2155.0781 Q974.3594,2155.2344 973.6563,2155.2344 Q971.1563,2155.2344 969.8281,2153.5938 Q968.5156,2151.9375 968.5156,2148.8125 Q968.5156,2145.6875 969.8281,2144.0313 Q971.1563,2142.375 973.6563,2142.375 Q974.3594,2142.375 975,2142.5313 Q975.6563,2142.6875 976.2188,2142.9844 L976.2188,2145.7031 Q975.5938,2145.125 975,2144.8594 Q974.4063,2144.5781 973.7813,2144.5781 Q972.4375,2144.5781 971.75,2145.6563 Q971.0625,2146.7188 971.0625,2148.8125 Q971.0625,2150.9063 971.75,2151.9844 Q972.4375,2153.0469 973.7813,2153.0469 Q974.4063,2153.0469 975,2152.7813 Q975.5938,2152.5 976.2188,2151.9219 L976.2188,2154.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="239" x="993.75" y="2155.2314">load_limit_panel::load_limit</text><line style="stroke:#181818;stroke-width:0.5;" x1="836" x2="1358" y1="2165" y2="2165"/><ellipse cx="846" cy="2180.9766" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="162" x="855" y="2185.708">max_load : double</text><ellipse cx="846" cy="2201.9297" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="225" x="855" y="2206.6611">line_category : std::string</text><line style="stroke:#181818;stroke-width:0.5;" x1="836" x2="1358" y1="2214.9063" y2="2214.9063"/><ellipse cx="846" cy="2230.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="99" x="855" y="2235.6143">load_limit()</text><ellipse cx="846" cy="2251.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="498" x="855" y="2256.5674">load_limit(const std::string&amp; category, double max_load)</text></g><!--MD5=[d17713487b8acafc1b1ef617a8bef536]
class rtm::core.locomotive--><g id="elem_rtm::core.locomotive"><rect codeLine="61" fill="#F1F1F1" height="257.5313" id="rtm::core.locomotive" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="701" x="37.5" y="1054"/><ellipse cx="334.75" cy="1070" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M334.8594,1065.3438 L333.7031,1070.4219 L336.0313,1070.4219 L334.8594,1065.3438 Z M333.375,1063.1094 L336.3594,1063.1094 L339.7188,1075.5 L337.2656,1075.5 L336.5,1072.4375 L333.2188,1072.4375 L332.4688,1075.5 L330.0313,1075.5 L333.375,1063.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="18" font-style="italic" lengthAdjust="spacing" textLength="98" x="355.25" y="1076.2314">locomotive</text><line style="stroke:#181818;stroke-width:0.5;" x1="38.5" x2="737.5" y1="1086" y2="1086"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="675" x="57.5" y="1106.708">const std::string&amp; image_path, unsigned int power, unsigned int max_speed,</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45.5" y="1119.9297"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="283" x="57.5" y="1127.6611">max_num_trailers : unsigned int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="45.5" y="1140.8828"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="183" x="57.5" y="1148.6143">power : unsigned int</text><line style="stroke:#181818;stroke-width:0.5;" x1="38.5" x2="737.5" y1="1156.8594" y2="1156.8594"/><ellipse cx="48.5" cy="1172.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="506" x="57.5" y="1177.5674">locomotive(const std::string&amp; name, const std::string&amp; id,</text><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="551" x="57.5" y="1198.5205">double length, double weight, unsigned int max_num_trailers)</text><ellipse cx="48.5" cy="1214.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" font-style="italic" lengthAdjust="spacing" textLength="252" x="57.5" y="1219.4736">get_tractive_force() : double</text><ellipse cx="48.5" cy="1235.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="335" x="57.5" y="1240.4268">get_max_num_trailers() : unsigned int</text><ellipse cx="48.5" cy="1256.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="235" x="57.5" y="1261.3799">get_power() : unsigned int</text><ellipse cx="48.5" cy="1277.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="465" x="57.5" y="1282.333">set_max_num_trailers(unsigned int max_carts) : void</text><ellipse cx="48.5" cy="1298.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="333" x="57.5" y="1303.2861">set_power(unsigned int power) : void</text></g><!--MD5=[0e03f7d41b71c561bee9a2cfb643f3e9]
class rtm::core.passenger_coach--><g id="elem_rtm::core.passenger_coach"><rect codeLine="74" fill="#F1F1F1" height="320.3906" id="rtm::core.passenger_coach" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="657" x="1470.5" y="1435"/><ellipse cx="1720.75" cy="1451" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1723.7188,1456.6406 Q1723.1406,1456.9375 1722.5,1457.0781 Q1721.8594,1457.2344 1721.1563,1457.2344 Q1718.6563,1457.2344 1717.3281,1455.5938 Q1716.0156,1453.9375 1716.0156,1450.8125 Q1716.0156,1447.6875 1717.3281,1446.0313 Q1718.6563,1444.375 1721.1563,1444.375 Q1721.8594,1444.375 1722.5,1444.5313 Q1723.1563,1444.6875 1723.7188,1444.9844 L1723.7188,1447.7031 Q1723.0938,1447.125 1722.5,1446.8594 Q1721.9063,1446.5781 1721.2813,1446.5781 Q1719.9375,1446.5781 1719.25,1447.6563 Q1718.5625,1448.7188 1718.5625,1450.8125 Q1718.5625,1452.9063 1719.25,1453.9844 Q1719.9375,1455.0469 1721.2813,1455.0469 Q1721.9063,1455.0469 1722.5,1454.7813 Q1723.0938,1454.5 1723.7188,1453.9219 L1723.7188,1456.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="148" x="1741.25" y="1457.2314">passenger_coach</text><line style="stroke:#181818;stroke-width:0.5;" x1="1471.5" x2="2126.5" y1="1467" y2="1467"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="631" x="1490.5" y="1487.708">const std::string&amp; image_path, double weight, unsigned int max_speed,</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1478.5" y="1500.9297"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="195" x="1490.5" y="1508.6611">class_type : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1478.5" y="1521.8828"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="170" x="1490.5" y="1529.6143">seats : unsigned int</text><line style="stroke:#181818;stroke-width:0.5;" x1="1471.5" x2="2126.5" y1="1537.8594" y2="1537.8594"/><ellipse cx="1481.5" cy="1553.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="556" x="1490.5" y="1558.5674">passenger_coach(const std::string&amp; name, const std::string&amp; id,</text><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="559" x="1490.5" y="1579.5205">double length, const std::string&amp; class_type, unsigned int seats)</text><ellipse cx="1481.5" cy="1595.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="177" x="1490.5" y="1600.4736">~passenger_coach()</text><ellipse cx="1481.5" cy="1616.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="236" x="1490.5" y="1621.4268">clone() : passenger_coach*</text><ellipse cx="1481.5" cy="1637.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="211" x="1490.5" y="1642.3799">get_class() : std::string&amp;</text><ellipse cx="1481.5" cy="1658.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="222" x="1490.5" y="1663.333">get_seats() : unsigned int</text><ellipse cx="1481.5" cy="1679.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="343" x="1490.5" y="1684.2861">accept(visitor_interface&amp; visitor) : void</text><ellipse cx="1481.5" cy="1700.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="398" x="1490.5" y="1705.2393">accept(const_visitor_interface&amp; visitor) : void</text><ellipse cx="1481.5" cy="1721.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="378" x="1490.5" y="1726.1924">set_class(const std::string new_class) : void</text><ellipse cx="1481.5" cy="1742.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="307" x="1490.5" y="1747.1455">set_seats(unsigned int seats) : void</text></g><!--MD5=[d93cd0a6f83f1a656dbcda583b311059]
class rtm::core.railroad_car--><g id="elem_rtm::core.railroad_car"><rect codeLine="90" fill="#F1F1F1" height="110.8594" id="rtm::core.railroad_car" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="614" x="790" y="1127.5"/><ellipse cx="1040.75" cy="1143.5" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1040.8594,1138.8438 L1039.7031,1143.9219 L1042.0313,1143.9219 L1040.8594,1138.8438 Z M1039.375,1136.6094 L1042.3594,1136.6094 L1045.7188,1149 L1043.2656,1149 L1042.5,1145.9375 L1039.2188,1145.9375 L1038.4688,1149 L1036.0313,1149 L1039.375,1136.6094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="18" font-style="italic" lengthAdjust="spacing" textLength="104" x="1061.25" y="1149.7314">railroad_car</text><line style="stroke:#181818;stroke-width:0.5;" x1="791" x2="1403" y1="1159.5" y2="1159.5"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="602" x="796" y="1180.208">const std::string&amp; image_path, double weight, unsigned max_speed,</text><line style="stroke:#181818;stroke-width:0.5;" x1="791" x2="1403" y1="1188.4531" y2="1188.4531"/><ellipse cx="801" cy="1204.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="512" x="810" y="1209.1611">railroad_car(const std::string&amp; name, const std::string&amp; id,</text><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="129" x="810" y="1230.1143">double length)</text></g><!--MD5=[1e50c975c52e5b4cc55992ea7530db0a]
class rtm::core.railway_vehicle--><g id="elem_rtm::core.railway_vehicle"><rect codeLine="96" fill="#F1F1F1" height="634.6875" id="rtm::core.railway_vehicle" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="657" x="413.5" y="359"/><ellipse cx="669.25" cy="375" fill="#A9DCDF" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M669.3594,370.3438 L668.2031,375.4219 L670.5313,375.4219 L669.3594,370.3438 Z M667.875,368.1094 L670.8594,368.1094 L674.2188,380.5 L671.7656,380.5 L671,377.4375 L667.7188,377.4375 L666.9688,380.5 L664.5313,380.5 L667.875,368.1094 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="18" font-style="italic" lengthAdjust="spacing" textLength="137" x="689.75" y="381.2314">railway_vehicle</text><line style="stroke:#181818;stroke-width:0.5;" x1="414.5" x2="1069.5" y1="391" y2="391"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="631" x="433.5" y="411.708">const std::string&amp; image_path, double weight, unsigned int max_speed,</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="421.5" y="424.9297"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="134" x="433.5" y="432.6611">length : double</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="421.5" y="445.8828"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="139" x="433.5" y="453.6143">weight : double</text><ellipse cx="424.5" cy="469.8359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" text-decoration="underline" textLength="302" x="433.5" y="474.5674">MIN_LENGTH : static const double</text><ellipse cx="424.5" cy="490.7891" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" text-decoration="underline" textLength="303" x="433.5" y="495.5205">MIN_WEIGHT : static const double</text><ellipse cx="424.5" cy="511.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" text-decoration="underline" textLength="333" x="433.5" y="516.4736">MIN_SPEED : static const unsigned int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="421.5" y="529.6953"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="122" x="433.5" y="537.4268">id : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="421.5" y="550.6484"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="208" x="433.5" y="558.3799">image_path : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="421.5" y="571.6016"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="155" x="433.5" y="579.333">name : std::string</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="421.5" y="592.5547"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="225" x="433.5" y="600.2861">max_speed : unsigned int</text><line style="stroke:#181818;stroke-width:0.5;" x1="414.5" x2="1069.5" y1="608.5313" y2="608.5313"/><ellipse cx="424.5" cy="624.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="545" x="433.5" y="629.2393">railway_vehicle(const std::string&amp; name, const std::string&amp; id,</text><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="129" x="433.5" y="650.1924">double length)</text><ellipse cx="424.5" cy="666.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="166" x="433.5" y="671.1455">~railway_vehicle()</text><ellipse cx="424.5" cy="687.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="186" x="433.5" y="692.0986">get_length() : double</text><ellipse cx="424.5" cy="708.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="191" x="433.5" y="713.0518">get_weight() : double</text><ellipse cx="424.5" cy="729.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" font-style="italic" lengthAdjust="spacing" textLength="225" x="433.5" y="734.0049">clone() : railway_vehicle*</text><ellipse cx="424.5" cy="750.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="187" x="433.5" y="754.958">get_id() : std::string&amp;</text><ellipse cx="424.5" cy="771.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="273" x="433.5" y="775.9111">get_image_path() : std::string&amp;</text><ellipse cx="424.5" cy="792.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="220" x="433.5" y="796.8643">get_name() : std::string&amp;</text><ellipse cx="424.5" cy="813.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="277" x="433.5" y="817.8174">get_max_speed() : unsigned int</text><ellipse cx="424.5" cy="834.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" font-style="italic" lengthAdjust="spacing" textLength="343" x="433.5" y="838.7705">accept(visitor_interface&amp; visitor) : void</text><ellipse cx="424.5" cy="854.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" font-style="italic" lengthAdjust="spacing" textLength="398" x="433.5" y="859.7236">accept(const_visitor_interface&amp; visitor) : void</text><ellipse cx="424.5" cy="875.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="296" x="433.5" y="880.6768">set_id(const std::string&amp; id) : void</text><ellipse cx="424.5" cy="896.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="405" x="433.5" y="901.6299">set_image_path(const std::string&amp; path) : void</text><ellipse cx="424.5" cy="917.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="283" x="433.5" y="922.583">set_length(double length) : void</text><ellipse cx="424.5" cy="938.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="417" x="433.5" y="943.5361">set_max_speed(unsigned int max_speed) : void</text><ellipse cx="424.5" cy="959.7578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="362" x="433.5" y="964.4893">set_name(const std::string&amp; name) : void</text><ellipse cx="424.5" cy="980.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="293" x="433.5" y="985.4424">set_weight(double weight) : void</text></g><!--MD5=[f2817074a982e143c62f7fa817294366]
class rtm::core.railyard--><g id="elem_rtm::core.railyard"><rect codeLine="127" fill="#F1F1F1" height="257.5313" id="rtm::core.railyard" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="607" x="438.5" y="41"/><ellipse cx="703.75" cy="57" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M706.7188,62.6406 Q706.1406,62.9375 705.5,63.0781 Q704.8594,63.2344 704.1563,63.2344 Q701.6563,63.2344 700.3281,61.5938 Q699.0156,59.9375 699.0156,56.8125 Q699.0156,53.6875 700.3281,52.0313 Q701.6563,50.375 704.1563,50.375 Q704.8594,50.375 705.5,50.5313 Q706.1563,50.6875 706.7188,50.9844 L706.7188,53.7031 Q706.0938,53.125 705.5,52.8594 Q704.9063,52.5781 704.2813,52.5781 Q702.9375,52.5781 702.25,53.6563 Q701.5625,54.7188 701.5625,56.8125 Q701.5625,58.9063 702.25,59.9844 Q702.9375,61.0469 704.2813,61.0469 Q704.9063,61.0469 705.5,60.7813 Q706.0938,60.5 706.7188,59.9219 L706.7188,62.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="68" x="724.25" y="63.2314">railyard</text><line style="stroke:#181818;stroke-width:0.5;" x1="439.5" x2="1044.5" y1="73" y2="73"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="333" x="458.5" y="93.708">: ctr::vector&lt;const railway_vehicle*&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="446.5" y="106.9297"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="375" x="458.5" y="114.6611">r_vehicles : ctr::vector&lt;railway_vehicle*&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="439.5" x2="1044.5" y1="122.9063" y2="122.9063"/><ellipse cx="449.5" cy="138.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="97" x="458.5" y="143.6143">~railyard()</text><ellipse cx="449.5" cy="159.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="332" x="458.5" y="164.5674">to_json_document() : QJsonDocument</text><ellipse cx="449.5" cy="180.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="371" x="458.5" y="185.5205">replace(const railway_vehicle&amp; r_v) : bool</text><ellipse cx="449.5" cy="201.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="581" x="458.5" y="206.4736">search(const std::function&lt;bool ( const railway_vehicle&amp; )&gt;&amp; fun)</text><ellipse cx="449.5" cy="222.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="504" x="458.5" y="227.4268">take(const railway_vehicle&amp; r_vehicle) : railway_vehicle*</text><ellipse cx="449.5" cy="243.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="390" x="458.5" y="248.3799">add(const railway_vehicle&amp; r_vehicle) : void</text><ellipse cx="449.5" cy="264.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="406" x="458.5" y="269.333">erase(const railway_vehicle&amp; r_vehicle) : void</text><ellipse cx="449.5" cy="285.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="18" lengthAdjust="spacing" textLength="510" x="458.5" y="290.2861">form_json_document(const QJsonDocument&amp; j_doc) : void</text></g><!--MD5=[aec9d1322483f6e677c643685b2a6fda]
reverse link rtm::core.locomotive to rtm::core.electric_locomotive--><g id="link_rtm::core.locomotive_rtm::core.electric_locomotive"><path codeLine="144" d="M382.58,1332.2 C381.1,1372.57 379.51,1416.13 378.05,1455.92 " fill="none" id="rtm::core.locomotive-backto-rtm::core.electric_locomotive" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="375.59,1331.77,383.32,1312.04,389.58,1332.28,375.59,1331.77" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d1e31f9a8bc2e5f7f4d4c869398aa7f5]
reverse link rtm::core.railroad_car to rtm::core.goods_wagon--><g id="link_rtm::core.railroad_car_rtm::core.goods_wagon"><path codeLine="147" d="M1097,1259 C1097,1291.35 1097,1331.05 1097,1371.66 " fill="none" id="rtm::core.railroad_car-backto-rtm::core.goods_wagon" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1090,1258.87,1097,1238.87,1104,1258.87,1090,1258.87" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[d3d38e129588fb9931f275652b09c622]
reverse link rtm::core.railroad_car to rtm::core.passenger_coach--><g id="link_rtm::core.railroad_car_rtm::core.passenger_coach"><path codeLine="150" d="M1224.14,1247.83 C1292.7,1283.07 1378.32,1328.43 1453,1372 C1486.9,1391.78 1522.21,1413.31 1556.75,1434.92 " fill="none" id="rtm::core.railroad_car-backto-rtm::core.passenger_coach" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="1220.79,1253.98,1206.19,1238.63,1227.18,1241.52,1220.79,1253.98" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[83ee9d7fb7f66dbb7176513943ed9462]
reverse link rtm::core.railway_vehicle to rtm::core.locomotive--><g id="link_rtm::core.railway_vehicle_rtm::core.locomotive"><path codeLine="153" d="M508.01,1010.96 C497.66,1025.71 487.6,1040.05 478,1053.74 " fill="none" id="rtm::core.railway_vehicle-backto-rtm::core.locomotive" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="502.6,1006.49,519.82,994.14,514.06,1014.54,502.6,1006.49" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[80eb167ada64db8ac252e58067f3cccc]
reverse link rtm::core.railway_vehicle to rtm::core.railroad_car--><g id="link_rtm::core.railway_vehicle_rtm::core.railroad_car"><path codeLine="156" d="M976.34,1010.52 C1007.96,1055.47 1036.89,1096.58 1058.5,1127.28 " fill="none" id="rtm::core.railway_vehicle-backto-rtm::core.railroad_car" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="970.6,1014.53,964.81,994.14,982.05,1006.47,970.6,1014.53" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fbb04611594a7921aa1098ae9f8198bd]
reverse link rtm::core.goods_wagon to rtm::core.load_limit_panel--><g id="link_rtm::core.goods_wagon_rtm::core.load_limit_panel"><path codeLine="162" d="M1097,1831.16 C1097,1847.35 1097,1863.05 1097,1877.77 " fill="none" id="rtm::core.goods_wagon-backto-rtm::core.load_limit_panel" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1097,1818.09,1093,1824.09,1097,1830.09,1101,1824.09,1097,1818.09" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f50a6fe43e2bdcbdd0cdf5b5ab0990f9]
reverse link rtm::core.railyard to rtm::core.railway_vehicle--><g id="link_rtm::core.railyard_rtm::core.railway_vehicle"><path codeLine="165" d="M742,312.72 C742,327.55 742,343.02 742,358.84 " fill="none" id="rtm::core.railyard-backto-rtm::core.railway_vehicle" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="742,299.29,738,305.29,742,311.29,746,305.29,742,299.29" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[41ac3fa0b8cf50a93448c9ed189e23a2]
reverse link rtm::core.load_limit_panel to rtm::core.load_limit_panel::load_limit--><g id="link_rtm::core.load_limit_panel_rtm::core.load_limit_panel::load_limit"><path codeLine="173" d="M1097,2088.21 C1097,2103.45 1097,2118.67 1097,2132.7 " fill="none" id="rtm::core.load_limit_panel-backto-rtm::core.load_limit_panel::load_limit" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="1097" cy="2081.01" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="1097" x2="1097" y1="2089.01" y2="2073.01"/><line style="stroke:#181818;stroke-width:1.0;" x1="1089" x2="1105" y1="2081.01" y2="2081.01"/></g><!--MD5=[e199dd490dd523d1ae4b202ddd1393ac]
@startuml
skinparam class {
  FontSize 18
} 

/' Objects '/

namespace rtm::core {
		class electric_locomotive {
			+electric_locomotive(const std::string& name, const std::string& id,
			const std::string& image_path, unsigned int power, unsigned int max_speed,
			double length, double weight, unsigned int max_trailers,
			double engine_efficiency)
			-engine_efficiency : double
			+get_engine_efficiency() : double 
			+get_tractive_force() : double 
			+clone() : electric_locomotive* 
			+accept(visitor_interface& visitor) : void
			+accept(const_visitor_interface& visitor) : void 
			+set_engine_efficiency(double efficiency) : void
		}

		class goods_wagon {
			+goods_wagon(const std::string& name, const std::string& id,
			const std::string& image_path, double weight, unsigned int max_speed,
			double length, bool is_covered, double floor_space, double load_capacity,
			const load_limit_panel& limit_panel)
			-covered : bool
			+is_covered() : bool 
			-floor_space : double
			+get_floor_space() : double 
			+get_load_capacity() : double 
			-load_capacity : double
			+clone() : goods_wagon* 
			+get_load_limit_panel() : load_limit_panel 
			-limit_panel : load_limit_panel
			+accept(visitor_interface& visitor) : void
			+accept(const_visitor_interface& visitor) : void 
			+set_covered(bool is_covered) : void
			+set_floar_space(double f_space) : void
			+set_load_capacity(double l_capacity) : void
			+set_load_limit_panel(const load_limit_panel& l_panel) : void
		}

		class load_limit_panel {
			+load_limit_panel()
			-table : ctr::vector<load_limit>
			+get_line_categorys() : ctr::vector<std::string> 
			+get_limit(const std::string& category) : double 
			+add_limit(const std::string& category, double load) : void
			+remove_limit(const std::string& category) : void
			+set_limit(const std::string& category, double load) : void
		}

		class load_limit_panel::load_limit {
			+load_limit()
			+load_limit(const std::string& category, double max_load)
			+max_load : double
			+line_category : std::string
		}

		abstract class locomotive {
			+locomotive(const std::string& name, const std::string& id,
			const std::string& image_path, unsigned int power, unsigned int max_speed,
			double length, double weight, unsigned int max_num_trailers)
			+{abstract} get_tractive_force() : double 
			+get_max_num_trailers() : unsigned int 
			+get_power() : unsigned int 
			-max_num_trailers : unsigned int
			-power : unsigned int
			+set_max_num_trailers(unsigned int max_carts) : void
			+set_power(unsigned int power) : void
		}

		class passenger_coach {
			+passenger_coach(const std::string& name, const std::string& id,
			const std::string& image_path, double weight, unsigned int max_speed,
			double length, const std::string& class_type, unsigned int seats)
			+~passenger_coach()
			+clone() : passenger_coach* 
			-class_type : std::string
			+get_class() : std::string& 
			+get_seats() : unsigned int 
			-seats : unsigned int
			+accept(visitor_interface& visitor) : void
			+accept(const_visitor_interface& visitor) : void 
			+set_class(const std::string new_class) : void
			+set_seats(unsigned int seats) : void
		}

		abstract class railroad_car {
			+railroad_car(const std::string& name, const std::string& id,
			const std::string& image_path, double weight, unsigned max_speed,
			double length)
		}

		abstract class railway_vehicle {
			+railway_vehicle(const std::string& name, const std::string& id,
			const std::string& image_path, double weight, unsigned int max_speed,
			double length)
			+~railway_vehicle()
			+get_length() : double 
			+get_weight() : double 
			-length : double
			-weight : double
			+{abstract} clone() : railway_vehicle* 
			+{static} MIN_LENGTH : static const double
			+{static} MIN_WEIGHT : static const double
			+{static} MIN_SPEED : static const unsigned int
			-id : std::string
			-image_path : std::string
			-name : std::string
			+get_id() : std::string& 
			+get_image_path() : std::string& 
			+get_name() : std::string& 
			+get_max_speed() : unsigned int 
			-max_speed : unsigned int
			+{abstract} accept(visitor_interface& visitor) : void
			+{abstract} accept(const_visitor_interface& visitor) : void 
			+set_id(const std::string& id) : void
			+set_image_path(const std::string& path) : void
			+set_length(double length) : void
			+set_max_speed(unsigned int max_speed) : void
			+set_name(const std::string& name) : void
			+set_weight(double weight) : void
		}

		class railyard {
			+~railyard()
			+to_json_document() : QJsonDocument 
			+replace(const railway_vehicle& r_v) : bool
			+search(const std::function<bool ( const railway_vehicle& )>& fun)
			: ctr::vector<const railway_vehicle*> 
			-r_vehicles : ctr::vector<railway_vehicle*>
			+take(const railway_vehicle& r_vehicle) : railway_vehicle*
			+add(const railway_vehicle& r_vehicle) : void
			+erase(const railway_vehicle& r_vehicle) : void
			+form_json_document(const QJsonDocument& j_doc) : void
		}
}

/' Inheritance relationships '/


rtm::core.locomotive <|- - rtm::core.electric_locomotive


rtm::core.railroad_car <|- - rtm::core.goods_wagon


rtm::core.railroad_car <|- - rtm::core.passenger_coach


rtm::core.railway_vehicle <|- - rtm::core.locomotive


rtm::core.railway_vehicle <|- - rtm::core.railroad_car



/' Aggregation relationships '/

rtm::core.goods_wagon *- - rtm::core.load_limit_panel


rtm::core.railyard o- - rtm::core.railway_vehicle





/' Nested objects '/

rtm::core.load_limit_panel +- - rtm::core.load_limit_panel::load_limit
@enduml

@startuml
skinparam class {
  FontSize 18
} 


namespace rtm::core {
		class electric_locomotive {
			+electric_locomotive(const std::string& name, const std::string& id,
			const std::string& image_path, unsigned int power, unsigned int max_speed,
			double length, double weight, unsigned int max_trailers,
			double engine_efficiency)
			-engine_efficiency : double
			+get_engine_efficiency() : double 
			+get_tractive_force() : double 
			+clone() : electric_locomotive* 
			+accept(visitor_interface& visitor) : void
			+accept(const_visitor_interface& visitor) : void 
			+set_engine_efficiency(double efficiency) : void
		}

		class goods_wagon {
			+goods_wagon(const std::string& name, const std::string& id,
			const std::string& image_path, double weight, unsigned int max_speed,
			double length, bool is_covered, double floor_space, double load_capacity,
			const load_limit_panel& limit_panel)
			-covered : bool
			+is_covered() : bool 
			-floor_space : double
			+get_floor_space() : double 
			+get_load_capacity() : double 
			-load_capacity : double
			+clone() : goods_wagon* 
			+get_load_limit_panel() : load_limit_panel 
			-limit_panel : load_limit_panel
			+accept(visitor_interface& visitor) : void
			+accept(const_visitor_interface& visitor) : void 
			+set_covered(bool is_covered) : void
			+set_floar_space(double f_space) : void
			+set_load_capacity(double l_capacity) : void
			+set_load_limit_panel(const load_limit_panel& l_panel) : void
		}

		class load_limit_panel {
			+load_limit_panel()
			-table : ctr::vector<load_limit>
			+get_line_categorys() : ctr::vector<std::string> 
			+get_limit(const std::string& category) : double 
			+add_limit(const std::string& category, double load) : void
			+remove_limit(const std::string& category) : void
			+set_limit(const std::string& category, double load) : void
		}

		class load_limit_panel::load_limit {
			+load_limit()
			+load_limit(const std::string& category, double max_load)
			+max_load : double
			+line_category : std::string
		}

		abstract class locomotive {
			+locomotive(const std::string& name, const std::string& id,
			const std::string& image_path, unsigned int power, unsigned int max_speed,
			double length, double weight, unsigned int max_num_trailers)
			+{abstract} get_tractive_force() : double 
			+get_max_num_trailers() : unsigned int 
			+get_power() : unsigned int 
			-max_num_trailers : unsigned int
			-power : unsigned int
			+set_max_num_trailers(unsigned int max_carts) : void
			+set_power(unsigned int power) : void
		}

		class passenger_coach {
			+passenger_coach(const std::string& name, const std::string& id,
			const std::string& image_path, double weight, unsigned int max_speed,
			double length, const std::string& class_type, unsigned int seats)
			+~passenger_coach()
			+clone() : passenger_coach* 
			-class_type : std::string
			+get_class() : std::string& 
			+get_seats() : unsigned int 
			-seats : unsigned int
			+accept(visitor_interface& visitor) : void
			+accept(const_visitor_interface& visitor) : void 
			+set_class(const std::string new_class) : void
			+set_seats(unsigned int seats) : void
		}

		abstract class railroad_car {
			+railroad_car(const std::string& name, const std::string& id,
			const std::string& image_path, double weight, unsigned max_speed,
			double length)
		}

		abstract class railway_vehicle {
			+railway_vehicle(const std::string& name, const std::string& id,
			const std::string& image_path, double weight, unsigned int max_speed,
			double length)
			+~railway_vehicle()
			+get_length() : double 
			+get_weight() : double 
			-length : double
			-weight : double
			+{abstract} clone() : railway_vehicle* 
			+{static} MIN_LENGTH : static const double
			+{static} MIN_WEIGHT : static const double
			+{static} MIN_SPEED : static const unsigned int
			-id : std::string
			-image_path : std::string
			-name : std::string
			+get_id() : std::string& 
			+get_image_path() : std::string& 
			+get_name() : std::string& 
			+get_max_speed() : unsigned int 
			-max_speed : unsigned int
			+{abstract} accept(visitor_interface& visitor) : void
			+{abstract} accept(const_visitor_interface& visitor) : void 
			+set_id(const std::string& id) : void
			+set_image_path(const std::string& path) : void
			+set_length(double length) : void
			+set_max_speed(unsigned int max_speed) : void
			+set_name(const std::string& name) : void
			+set_weight(double weight) : void
		}

		class railyard {
			+~railyard()
			+to_json_document() : QJsonDocument 
			+replace(const railway_vehicle& r_v) : bool
			+search(const std::function<bool ( const railway_vehicle& )>& fun)
			: ctr::vector<const railway_vehicle*> 
			-r_vehicles : ctr::vector<railway_vehicle*>
			+take(const railway_vehicle& r_vehicle) : railway_vehicle*
			+add(const railway_vehicle& r_vehicle) : void
			+erase(const railway_vehicle& r_vehicle) : void
			+form_json_document(const QJsonDocument& j_doc) : void
		}
}



rtm::core.locomotive <|- - rtm::core.electric_locomotive


rtm::core.railroad_car <|- - rtm::core.goods_wagon


rtm::core.railroad_car <|- - rtm::core.passenger_coach


rtm::core.railway_vehicle <|- - rtm::core.locomotive


rtm::core.railway_vehicle <|- - rtm::core.railroad_car




rtm::core.goods_wagon *- - rtm::core.load_limit_panel


rtm::core.railyard o- - rtm::core.railway_vehicle






rtm::core.load_limit_panel +- - rtm::core.load_limit_panel::load_limit
@enduml

PlantUML version 1.2022.7(Mon Aug 22 17:01:30 UTC 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>